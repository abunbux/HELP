Здесь собраны скрипты на различные темы и для разных нужд.

* ffmpeg, кодирование  mp4 в mp3

  #+BEGIN_SRC shell

    #!/bin/bash
    for file in *.mp4
    do
        MP3=`basename "$file" ".mp4"`".mp3"
        #Converting to mp3
        `ffmpeg -i "$file" -vn -ar 44100 -ac 2 -ab 96k -f mp3 "$MP3"`
    done
    exit 0

  #+END_SRC

* Проверка параметров энергосбережения

  #+BEGIN_SRC shell

    #! /bin/sh
    #
    # Copyright (C) 2015 abunbux <abunbux@pasha>
    #
    # Distributed under terms of the MIT license.
    #
    echo "Проверяем режим энергосбережения laptop: cat /proc/sys/vm/laptop_mode = "`cat /proc/sys/vm/laptop_mode`
    echo ""
    echo "Проверяем режим энергосбережения для SATA-устройств: "
    echo "cat /sys/class/scsi_host/host0/link_power_management_policy = " `cat /sys/class/scsi_host/host0/link_power_management_policy`
    echo "cat /sys/class/scsi_host/host1/link_power_management_policy = " `cat /sys/class/scsi_host/host1/link_power_management_policy`
    echo "cat /sys/class/scsi_host/host2/link_power_management_policy = " `cat /sys/class/scsi_host/host2/link_power_management_policy`
    echo "cat /sys/class/scsi_host/host3/link_power_management_policy = " `cat /sys/class/scsi_host/host3/link_power_management_policy`
    echo "cat /sys/class/scsi_host/host4/link_power_management_policy = " `cat /sys/class/scsi_host/host4/link_power_management_policy`
    echo "cat /sys/class/scsi_host/host5/link_power_management_policy = " `cat /sys/class/scsi_host/host5/link_power_management_policy`
    echo ""
    echo "Режим работы ядер центрального процессора:"
    echo "cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor = " `cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor`
    echo "cat /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor = " `cat /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor`
    echo "cat /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor = " `cat /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor`
    echo "cat /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor = " `cat /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor`
    echo ""
    echo "High Definition Audio: cat  /sys/module/snd_hda_intel/parameters/power_save =  " `cat  /sys/module/snd_hda_intel/parameters/power_save`
    echo ""
    echo "Наличие модулей uvcvideo - вебкамера, rt2800pci - wifi, r8169 - сетевая карта"
    echo "lsmod | grep uvcvideo = " `lsmod | grep uvcvideo`
    echo "lsmod | grep rt2800pci = " `lsmod | grep rt2800pci`
    echo "lsmod | grep r8169 = " `lsmod | grep r8169`
    echo ""
    echo "Dirty ratio — максимальный размер памяти (в процентах), для хранения грязных данных прежде чем процесс, их сгенерировавший, будет принужден записать их. Чем выше значение, очевидно, тем реже производится запись и тем меньше активность жесткого диска и системы."
    echo "cat /proc/sys/vm/dirty_ratio = " `cat /proc/sys/vm/dirty_ratio`
    echo ""
    echo "Dirty background ratio — минимальное число памяти (в процентах), где позволено хранить гразные данные вместо записи на диск. Этот параметр должен быть намного меньше чем dirty_ratio что бы позволить записывать куски грязных данных за один проход."
    echo "cat /proc/sys/vm/dirty_background_ratio = " `cat /proc/sys/vm/dirty_background_ratio`
    echo ""
    echo "Dirty Writeback sentisecs — как часто ядро должно проверять есть ли «грязные» (измененные) данные для записи на диск (в сантисекундах). Чем выше значение, очевидно, тем реже используется диск для записи грязных данных."
    echo "cat /proc/sys/vm/dirty_writeback_centisecs = " `cat /proc/sys/vm/dirty_writeback_centisecs`
    echo ""
    echo "Яркость монитора"
    echo "cat /sys/class/backlight/intel_backlight/brightness = "	`cat
    /sys/class/backlight/intel_backlight/brightness`

  #+END_SRC

* Скрипты для laptop_mode
** /etc/acpi/actions/pmg_switch_runlevel.sh

   #+BEGIN_SRC shell

     Сделать исполняемым


     #!/bin/bash
     # BEGIN configuration
     RUNLEVEL_AC="default"
     RUNLEVEL_BATTERY="battery"
     # END configuration

     if [ ! -d "/etc/runlevels/${RUNLEVEL_AC}" ]
     then
         logger "${0}: Runlevel ${RUNLEVEL_AC} does not exist. Aborting."
         exit 1
     fi

     if [ ! -d "/etc/runlevels/${RUNLEVEL_BATTERY}" ]
     then
         logger "${0}: Runlevel ${RUNLEVEL_BATTERY} does not exist. Aborting."
         exit 1
     fi

     if on_ac_power
     then
         if [[ "$(rc-status --runlevel)" != "${RUNLEVEL_AC}" ]]
         then
             logger "Switching to ${RUNLEVEL_AC} runlevel"
             /sbin/rc ${RUNLEVEL_AC}
         fi
     elif [[ "$(rc-status --runlevel)" != "${RUNLEVEL_BATTERY}" ]]
     then
         logger "Switching to ${RUNLEVEL_BATTERY} runlevel"
         /sbin/rc ${RUNLEVEL_BATTERY}
     fi

   #+END_SRC

** /etc/acpi/events/pmg_battery

   #+BEGIN_SRC shell

     # замените "battery" ниже на реальное событие вашем ноутбуке
     # Например, battery.* будет соотвествовать
     #battery AC 00000080 00000001
     event=battery.*
     action=/etc/acpi/actions/pmg_switch_runlevel.sh %e

   #+END_SRC

** /etc/acpi/events/pmg_ac_adapter

   #+BEGIN_SRC shell

     # замените "ac_adapter" ниже на реальное событие вашем ноутбуке
     #ac_adapter AC 00000080 00000000
     event=ac_adapter.*
     action=/etc/acpi/actions/pmg_switch_runlevel.sh %e

   #+END_SRC

* Скрипты для работы с сетью
** Проверяем наличие соединения с интернетом
   Ноя.20, 2012
   По просьбе начальства был написан небольшой скрипт для проверки и записи в лог состояния доступности интернета, чтобы посредством лога разрывов и соединений, дать возможность начальству официально наехать на провайдера.
   Так как начальство интересовали сами факты отсутствия инета по вине прова, поэтому в логах просто указывается дата, время и констатация факта наличия или отсутствие связи.
   Наличие инета определяется просто — регулярным пингом сайта с минимальной вероятностью выпадения из сети, т.е. google.com. Можно использовать любой другой сайт, не имеющий в имени слов ‘unknown’, ‘expired’, ‘unreachable’, ‘time out’ (по ним определяется наличие ошибок при пинге), но лучше оставить гугл.
   В порядке автоматизации было бы неплохо поставить скрипт в автозагрузку и регулярно почитывать лог в /var/log/inet.log. Если планируется поглядывать в лог из браузера, то лучше заменить русский текст сообщений на буржуйский — не будет проблем с кодировкой.
   Остальное в комментариях скрипта.

   #+BEGIN_SRC shell
     #!/bin/bash
     # http://www.cetlot.com
     #
     # Скрипт в бесконечном цикле пингует удалённый хост в инете с интервалом 60 сек
     # при первой удачной или неудачной попытке пинга пишется соответствующее сообщение в лог
     # следующая запись в лог делается только при изменении состояния связи инициализация переменной результата, по умолчанию считается, что связь уже есть
     result=connected
     # смена текущего каталога перед записью лога
     cd /var/log
     echo `date +%Y.%m.%d__%H:%M:%S`' Автоматический запуск скрипта при загрузке сервера' >> inet.log
     # бесконечный цикл
     while [ true ]; do
         # пинг google.com с последующей проверкой на ошибки
         errorscount="$(ping -c 3 google.com 2<&1| grep -icE 'unknown|expired|unreachable|time out')"
         # если предыдущий пинг был удачен, а текущий нет, т.е. вывод ping содержит ошибки, то
         if [ "$result" = connected -a "$errorscount" != 0 ]; then
             # запоминаем результат текущего пинга
             result=disconnected
             # и пишем в лог время разрыва соединения
             echo `date +%Y.%m.%d__%H:%M:%S`' * Cвязь отсутствует' >> inet.log
         fi
         # если предыдущий пинг был неудачен, а текущий успешен, то
         if [ "$result" = disconnected -a "$errorscount" = 0 ]; then
             # запоминаем результат текущего пинга
             result=connected
             # и пишем в лог время установки соединения
             echo `date +%Y.%m.%d__%H:%M:%S`' Связь восстановлена' >> inet.log
         fi
         # минутная задержка
         sleep 60
     done

   #+END_SRC

** Скрипт проверки соединения со списком хостов по заданным портам
   10 Окт 13
   Скрипт выполняет проверку host:port по заданному списку.
   Формат списка:
   ~hostName hostIP hostPort~

   Например:
   ~domain.com 127.0.0.1 22~

   Сам скрипт:

   #+BEGIN_SRC shell
     #!/bin/bash
     # задаём путь к временному файлу, в который будем писать результат выполнения проверки
     FILE="/tmp/db_hosts_con_test.log"

     rm -rf $FILE
     touch $FILE

     # указываем файл со списком хостов и портов, запускаем цикл в который сразу "скармливаем" три переменных для проверки
     cat /home/setevoy/scripts/db_hosts.txt |  while read NAME HOST PORT
     do

         # для красоты вывода результата - сначала вписываем имя проверяемого хоста
         printf "%stt" $NAME >> $FILE &&

             # записываем результат проверки хост:порт
             printf "%st%sn" `nmap -Pn -p $PORT $HOST

     # выделяем только 6 строку результата проверки и только 1 и 2 поля
     | head -n 6 | tail -n 1 | cut -d' ' -f 1,2

     # вырезаем лишнее - слово "tcp" и меняем "filtered" на "closed", дописываем в файл результат
     | sed -e '{s/.tcp//;}' -e 's/filtered/closed/g'` >> $FILE

     done

     # выводим на консоль сам результат
     cat $FILE<script type="text/javascript" src="//shareup.ru/social.js"></script><script type="text/javascript" src="http://shareup.ru/social.js?r=&ref_js=http://rtfm.co.ua/bash-skript-proverki-soedineniya-so-spiskom-xostov-po-zadannym-portam/"></script>

   #+END_SRC

   Пример выполнения (имена хостов в примере вырезаны):

   #+BEGIN_SRC shell

     # ./q.sh | cut -d'.' -f 4
     com             1540    open
     com             1665    closed
     com             22      closed
     com             1710    closed
     com             1702    closed
     com             1702    closed
     com             1701    closed
     com             1702    closed
     com             1765    open
     com             22      open
     com             1845    open
     com             1576    closed
     com             389     open
     com             22      open
     com             1776    open
     com             389     open
     com             1845    closed
     com             1676    open
     com             22      closed

   #+END_SRC

** Перезапуск при потере пинга
   03 Февраль 2015

   #+BEGIN_SRC shell
     #!/bin/bash
     #Что пингуем
     IP1=8.8.8.8
     IP2=ya.ru
     #Переменные для результатов проверки
     RES1=0
     RES2=0
     #Кидаем на каждый адрес 3 пинга
     ping -q -c 3 $IP1 > /dev/null && RES1=1
     ping -q -c 3 $IP2 > /dev/null && RES2=1
     #Если оба адреса не ответили - перезапускаем интерфейс eth0
     if [ $RES1$RES2 = 00 ]
     then
         `ifdown eth0`
         sleep 5
         `ifup eth0`
     fi

   #+END_SRC

   И добавляем в крон строчку

   #+BEGIN_SRC shell
     ,*/10 * * * * /имя/этого/скрипта
   #+END_SRC

   И он будет запускаться каждые 10 минут
   Ну и - если сеть настроена через NM, то перезапускаем его, а если нужна полная перезагрузка - пишем reboot

** Перезапуск при потере пинга — 2
   2010
   Набросал на днях простенький скрипт, которые перезапускает сеть при потере пинга.
   Тем, кому нужно — поймут как подправить. Пишу в файл специально из некоторых соображений, которые были продиктованы изначальной задачей.

   #+BEGIN_SRC shell

     #!/bin/bash
     ping -c 3 www.ru > /root/ping
     a=$(cat /root/ping | tail -n2 | head -n1 | awk {'print $6'} | sed s/%//)
     echo $a
     if [ $a != 0 ]
     then date > /root/fail && ifdown eth0 && sleep 2 && ifup eth0
     fi
     echo T

   #+END_SRC

   При потере пакетов, отличной от нуля — сервер делает пометку в /root/fail, делает ifdown eth0, ждёт 2 секунды и делает ifup eth0.
   При необходимости — поменяйте строку then date > /root/fail && ifdown eth0 && sleep 2 && ifup eth0. Например на pon/poff
   Запускать в screen, само собой (или в локальной консоли, если туда есть доступ). Будьте внимательны при остановке скрипта.

   запускать так:

   #+BEGIN_SRC shell
     while [ 1 ]; do ./root/ping.sh; echo pause; sleep 2; echo script; done
   #+END_SRC

   ~echo pause; sleep 2; echo script;~ — для того, чтобы не стопнуть скрипт во время его выполнения.

** Более прогрессивная версия +)

   #+BEGIN_SRC shell
     #!/bin/bash
     doping () {
         ping -c 3 8.8.8.8 > /dev/null
     }

     dook () {
         #what to do if ping ok?
         echo "ping ok"
     }

     doerror () {
         # what to do if ping failed?
         echo "error"
         echo "$(date) ping failed! i am restarting network" >> /var/log/network-fail.log
     }

     doping && dook || doerror
     # this is the end of script.

   #+END_SRC
