# -*- mode: org; -*-
#+TITLE: Установка и настройка gentoo
#+DESCRIPTION: моя шпаргалка по установке «gentoo».
#+KEYWORDS: gentoo
#+AUTHOR:
#+email:
#+INFOJS_OPT:
#+STARTUP:  content

#+DATE: CREATED: <Sun Feb 17 16:59:08 EEST 2021>
# Time-stamp: <Последнее обновление -- Tuesday January 25 22:31:55 EET 2022>


* Создание папок и монтирование дисков

  #+begin_src shell
    mkdir /mnt/gentoo
    mount /dev/sda3 /mnt/gentoo/ (диск, ясное дело, указать свой)
    mkdir -p /mnt/gentoo/{boot,home,var}
    mount /dev/sda{1-9} /mnt/gentoo/{boot,home,var} (здесь, опять же, у каждого своё)
  #+end_src

* Время и дата

  #+begin_src shell
    date
  #+end_src

  В случае необходимости

  #+begin_src shell
    date 090615302018 (месяц, число, час, минута, год)
  #+end_src

  либо с помощью автоматической синхронизации:

  #+begin_src shell
    ntpd -q -g
  #+end_src

  но следует помнить, что автоматическая синхронизация времени имеет свою цену.
  Сведения об IP-адресе и связанная с сетевыми настройками информация будет
  отправляться на сервер времени (в данном примере — на ntp.org). Пользователи,
  озабоченные безопасностью, должны быть осведомлены об этом до настройки
  системных часов с помощью указанного метода ([[https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Stage/ru][выдержка из wiki gentoo]]).

* Скачивание архива с системой

  #+begin_src shell
    cd /mnt/gentoo
    links gentoo.org/downloads/mirrors
  #+end_src

  Выбираем зеркало из ближайшей по списку страны и далее
  ~releases > amd64 > autobuilds > current-stage3-amd64 > stage3-amd64-*.tar.xz~ .
  Скачивание происходит по клавише «D» или «Enter».

  Распаковываем:

  #+begin_src shell
    tar xpvf stage3-*.tar.xz --xattrs-include='*.*' --numeric-owner
  #+end_src

  - ~x~ указывает на извлечение (extract),
  - ~p~ для сохранения (preserve) прав доступа,
  - ~f~ для обозначения, что мы хотим извлечь файл (file), а не стандартный ввод,
  - ~--xattrs-include='*.*'~ позволит также сохранить расширенные атрибуты во всех
  пространствах имен, хранящиеся в архиве,
  - ~--numeric-owner~ используется для того, чтобы убедиться, что идентификаторы
  пользователей и групп распаковываемых файлов останутся такими же, как и
  задумывались командой Gentoo по подготовке релизов (даже если предприимчивые
  пользователи не используют официальный установочный носитель Gentoo).

* Первое редактирование make.conf

  Файл ~/etc/portage/make.conf~ является основным конфигурационным файлом Portage.

  Список и описание всех допустимых переменных можно найти в
  ~/mnt/gentoo/usr/share/portage/config/make.conf.example~.

  # nano /mnt/gentoo/etc/portage/make.conf

  #+BEGIN_SRC conf

        # These settings were set by the catalyst build script that automatically
        # built this stage.
        # Please consult /usr/share/portage/config/make.conf.example for a more
        # detailed example.

        COMMON_FLAGS="-O2 -march=native -pipe"
        CHOST="x86_64-pc-linux-gnu"
        CFLAGS="COMMON_FLAGS"
        CXXFLAGS="COMMON_FLAGS"
        FCFLAGS="COMMON_FLAGS"
        FFLAGS="COMMON_FLAGS"


        USE="mmx sse sse2 ssse3 sse4 sse4_1 sse4_2"
        USE="USE bash-completion emacs python vim-syntax"
        USE="USE -cups -libav -3dnow"


        MAKEOPTS="-j5"
        EMERGE_DEFAULT_OPTS="EMERGE_DEFAULT_OPTS --jobs=2 --ask --verbose --usepkg --usepkg-exclude 'sys-kernel/gentoo-sources virtual/* */*-bin'"
        FEATURES="FEATURES parallel-fetch buildpkg"
        PORTAGE_NICENESS="15"


        # NOTE: This stage was built with the bindist Use flag enabled
        PORTDIR="/var/db/repos/gentoo"
        DISTDIR="/var/cache/distfiles"
        PKGDIR="/var/cache/binpkgs"

        GRUB_PLATFORMS="pc"
        VIDEO_CARDS="intel i915 i965"
        INPUT_DEVICES="keyboard mouse evdev synaptics libinput"

        AUTOCLEAN="yes"
        LINGUAS="ru en ru_RU"
        L10N="ru"
        ACCEPT_LICENSE="*"
        PORTAGE_ELOG_SYSTEM="save"
        PORTAGE_ELOG_CLASSES="warn error info log qa"

        # This sets the language of build output to English.
        # Please keep this setting intact when reporting bugs.
        LC_MESSAGES=C

  #+END_SRC

* repos.conf и mirrorselect

  Для быстрой загрузки исходного кода рекомендуется выбрать быстрое зеркало.
  Portage будет искать в файле make.conf переменную GENTOO_MIRRORS и
  использовать перечисленные в ней зеркала. Можно просмотреть список зеркал
  Gentoo и найти зеркало (или зеркала), наиболее близко расположенное к месту
  физического расположения (чаще всего они и есть самые быстрые). Тем не менее,
  мы предоставляем хороший инструмент под названием mirrorselect, который
  предлагает удобный интерфейс для выбора подходящего зеркала. Просто перейдите
  на нужное зеркало и нажмите пробел для выбора одного или нескольких ([[https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Stage/ru][выдержка из wiki gentoo]]).

  #+begin_src shell
    mirrorselect -i -o >> /mnt/gentoo/etc/portage/make.conf
  #+end_src

  Вторым важным шагом в выборе зеркала является настройка репозитория
  ebuild-файлов Gentoo в /etc/portage/repos.conf/gentoo.conf. Этот файл содержит
  информацию, необходимую для обновления репозитория пакетов (коллекции ebuild и
  связанных с ними файлов, содержащих всю необходимую Portage информацию для
  загрузки и установки пакетов программного обеспечения) ([[https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Stage/ru][выдержка из wiki gentoo]]).

  #+BEGIN_SRC shell

    mkdir /mnt/gentoo/etc/portage/repos.conf
    cp /mnt/gentoo/usr/share/portage/config/repos.conf /mnt/gentoo/etc/portage/repos.conf/gentoo.conf

  #+END_SRC

* resolv.conf

  Единственное, что ещё осталось сделать перед входом в новое окружение, это
  скопировать информацию о DNS из файла /etc/resolv.conf. Это нужно сделать,
  чтобы сеть всё ещё будет работать даже после входа в новое окружение. Файл
  /etc/resolv.conf содержит сервера имён.

  Чтобы скопировать эту информацию, рекомендуется ввести ключ ~--dereference~ для
  команды ~cp~. Благодаря этому /etc/resolv.conf будет скопирован как файл, если
  является символьной ссылкой. В противном случае в новом окружении
  символическая ссылка будет ссылаться на несуществующий файл (так как цель
  ссылки, скорее всего, будет недоступна внутри нового окружения).

  #+BEGIN_SRC shell
    cp --dereference /etc/resolv.conf /mnt/gentoo/etc/
  #+END_SRC

* mount {proc,dev,sys}

  Чтобы новое окружение работало должным образом, для него должны быть доступны
  некоторые файловые системы.

  Файловые системы, которые должны быть доступны:

  /proc/ — псевдофайловая система (она выглядит как обычные файлы, но на самом
  деле генерируется на лету), через которую ядро Linux предоставляет информацию
  для окружения;

  /sys/ — псевдофайловая система, как и /proc/, которую она однажды заменит, также
  она более структурирована, чем /proc/;

  /dev/ — это обычная файловая система, частично управляемая менеджером устройств
  Linux (обычно udev), которая содержит все файлы устройств;

  Каталог /proc/ монтируется в /mnt/gentoo/proc/, остальные два каталога - через
  перепривязку точки монтирования. Это означает, что, например, /mnt/gentoo/sys/
  на самом деле будет /sys/ (это просто вторая точка входа в ту же файловую
  систему), тогда как /mnt/gentoo/proc/ является новой точкой монтирования (так
  сказать, экземпляром) файловой системы.

  #+BEGIN_SRC shell

    mount --types proc /proc /mnt/gentoo/proc
    mount --rbind /sys /mnt/gentoo/sys
    mount --make-rslave /mnt/gentoo/sys
    mount --rbind /dev /mnt/gentoo/dev
    mount --make-rslave /mnt/gentoo/dev

  #+END_SRC

  *Заметка*
  Параметр ~--make-rslave~ необходим для дальнейшей поддержки systemd в ходе
  установки.

  *Предупреждение*
  Если при установке используется не дистрибутив Gentoo, то этого может быть
  недостаточно. Некоторые дистрибутивы делают /dev/shm символьной ссылкой на
  /run/shm/, которая после перехода в изолированную среду станет недействительной.

  Создание правильного подключения /dev/shm/ в tmpfs поможет избежать этой
  проблемы:

  #+BEGIN_SRC shell

    test -L /dev/shm && rm /dev/shm && mkdir /dev/shm
    mount --types tmpfs --options nosuid,nodev,noexec shm /dev/shm

  #+END_SRC

  Также проверьте, что права доступа установлены в 1777:

  #+BEGIN_SRC shell
    chmod 1777 /dev/shm
  #+END_SRC

* Переходим в CHROOT

  #+BEGIN_SRC conf
        cd /mnt/gentoo/
        chroot /mnt/gentoo /bin/bash
        source /etc/profile
        export PS1="(chroot) $PS1"
  #+END_SRC

* Синхронизируем дерево PORTAGE

  Следующим шагом будет установка снимка репозитория ebuild-файлов Gentoo. Этот
  снимок содержит коллекцию файлов, которая сообщает Portage о доступных
  программах (для установки), какой профиль может выбрать системный
  администратор, о новостях о конкретных пакетах или профилях и так далее.

  ~emerge-webrsync~ рекомендуется использовать в случаях, когда система находится
  за межсетевым экраном (для загрузки снимка используется только протоколы
  HTTP/HTTPS), а также когда необходимо снизить нагрузку канал сети. У кого нет
  ограничений с сетью или шириной канала, могут счастливо использовать
  ~emerge --sync~.

  Одной из следующих команд достаточно для синхронизации.
  Для более подробной информации смотрите статью [[https://wiki.gentoo.org/wiki/Project:Portage/Sync][Portage sync]] на wiki gentoo.

  #+BEGIN_SRC conf
        emerge --sync
        emaint sync -a
        emaint sync --repo gentoo
        emerge-webrsync
  #+END_SRC

* Выбираем PROFILE

  #+BEGIN_SRC shell
    eselect profile list
    eselect profile set {ставим нужное}
  #+END_SRC

  Но на данном этапе этого, пожалуй, делать ещё не нужно - оставляем как есть.

* Обновим сразу мир

  На данный момент разумно будет обновить @world чтобы базовая часть системы
  изменилась.

  Это действие необходимо, чтобы система могла применить какие-либо обновления с
  момента сборки stage3 и обновления профиля:

  #+begin_src shell
    emerge --update --deep --with-bdeps=y --newuse @world -av --keep-going
  #+end_src

* cpuid2cpuflags

  #+begin_src shell
    emerge --ask app-portage/cpuid2cpuflags
    cpuid2cpuflags
  #+end_src

  Полученную строку вставляем в /etc/portage/make.conf

  #+BEGIN_SRC conf

        nano /etc/portage/make.conf
        CPU_FLAGS_X86="aes avx mmx mmxext popcnt sse sse2 sse3 sse4_1 sse4_2 ssse3" (у каждого свой вывод этой команды)

  #+END_SRC

  #+BEGIN_SRC conf
        emerge -C app-portage/cpuid2cpuflags
  #+END_SRC

* Устанавливаем часовой пояс

  #+BEGIN_SRC conf
        ls /usr/share/zoneinfo
        echo "Europe/Zaporozhye" > /etc/timezone
        emerge --config sys-libs/timezone-data
  #+END_SRC

* Создаём локали

  Локали, поддерживаемые системой, должны быть указаны в ~/etc/locale.gen~.

  #+BEGIN_SRC conf

        nano -w /etc/locale.gen

        en_US.UTF-8 UTF-8
        ru_RU.UTF-8 UTF-8

  #+END_SRC

  #+BEGIN_SRC conf
        locale-gen
        eselect locale list
        eselect locale set {нужно установить en_US.UTF-8 UTF-8} (всё-равно кириллица пока отображаться не будет)
        env-update && source /etc/profile && export PS1="(chroot) $PS1"
  #+END_SRC

  Это также можно сделать вручную, с помощью файла ~/etc/env.d/02locale~:

  #+BEGIN_SRC conf
        nano /etc/env.d/02locale
        LANG="ru_RU.UTF-8"
        LC_COLLATE="C"
  #+END_SRC

* Время

  #+BEGIN_SRC conf

        nano /etc/conf.d/hwclock

        clock="UTC"
        clock_systohc="YES"
        clock_args=""

  #+END_SRC

* Ставим первый необходимый набор программ

  #+BEGIN_SRC shell

    echo "net-misc/ntp    caps" >> /etc/portage/package.use/net-misc

    emerge app-admin/logrotate app-admin/syslog-ng app-editors/nano app-portage/eix app-portage/gentoolkit app-portage/portage-utils net-misc/dhcpcd net-misc/ntp sys-apps/mlocate sys-fs/udev sys-process/cronie app-shells/bash-completion app-shells/gentoo-bashcomp app-eselect/eselect-repository dev-vcs/git


    updatedb
    eix-update
    eix-remote update1
    rc-update add cronie default
    rc-update add sshd default (при необходимости)
    rc-update add syslog-ng boot
    rc-update add ntp-client default
    rc-update add udev sysinit

  #+END_SRC

* Ставим исходники ядра и grub

  Добавить флаг ~mount~ для ~grub2~ (требует ~os-prober~)

  #+BEGIN_SRC conf

        nano /etc/portage/package.use/sys-boot

        sys-boot/grub   mount


        emerge -av sys-kernel/genkernel sys-kernel/gentoo-sources sys-boot/grub sys-boot/os-prober

        nano /etc/genkernel.conf

        INSTALL="yes"
        OLDCONFIG="yes"
        MENUCONFIG="yes"
        MRPROPER="yes"
        MOUNTBOOT="yes"
        SAVE_CONFIG="yes"
        NOCOLOR="false"
        MAKEOPTS="$(portageq envvar MAKEOPTS)"
        NICE=10

        eselect kernel list
        eselect kernel set {}
        genkernel all

  #+END_SRC


  #+BEGIN_SRC conf

        grub-install /dev/sda

        nano /etc/default/grub

        GRUB_DISTRIBUTOR="Gentoo Linux Desktop"
        GRUB_DISABLE_OS_PROBER=false (без этой строчки другие ОС не прописываются в загрузку - в последних версиях grub (2.06_rc1))
        GRUB_DEFAULT=saved
        GRUB_TIMEOUT=5
        GRUB_TIMEOUT_STYLE=menu
        GRUB_CMDLINE_LINUX="video=1600x900 rootfstype=ext4 resume=/dev/sda6 init=/linuxrc ramdisk=8192 udev rd.retry=40"
        GRUB_GFXMODE="1600x900"
        GRUB_GFXPAYLOAD_LINUX="1600x900x24,1600x900,1024x768"
        GRUB_DISABLE_RECOVERY=true

        grub-mkconfig -o /boot/grub/grub.cfg

  #+END_SRC

* Ставим второй необходимый набор программ

  #+BEGIN_SRC conf

        # Включаем репозиторий «raiagent» для получения «media-fonts/powerline-fonts».
        eselect repository enable raiagent
        emerge --sync raiagent
        eix-sync
        echo '=media-fonts/powerline-fonts-9999* ~amd64' >> /etc/portage/package.accept_keywords/media-fonts
        echo 'media-fonts/powerline-fonts    3270 anonymouspro arimo cousine dejavusansmono droids ansmono droidsansmonodotted droidsansmonoslashed firamono gomono hack inconsolata in consolata-g inconsolatadz liberationmono meslodotted mesloslashed monofur notomono n ovamono profont robotomono sourcecodepro spacemono symbolneu terminus_pcf tinos ubun tumono' >> /etc/portage/package.use/media-fonts


        echo "app-shells/fzf ~amd64" >> /etc/portage/package.accept_keywords/app-shells
        echo "app-shells/powerline ~amd64" >> /etc/portage/package.accept_keywords/app-shells
        echo 'sys-apps/bat ~amd64' >> /etc/portage/package.accept_keywords/sys-apps
        echo 'app-misc/grc ~amd64' >> /etc/portage/package.accept_keywords/app-misc

        emerge -av app-portage/elogv app-portage/genlop sys-apps/most sys-apps/pciutils sys-apps/usbutils sys-fs/ntfs3g sys-fs/ncdu sys-apps/the_silver_searcher sys-apps/ripgrep sys-apps/inxi app-admin/pydf app-admin/ccze app-shells/powerline app-misc/tmux app-misc/screen app-shells/fzf media-fonts/powerline-symbols sys-apps/bat media-fonts/powerline-fonts media-fonts/corefonts media-fonts/cronyx-fonts media-fonts/fira-code media-fonts/freefonts media-fonts/inconsolata media-fonts/terminus-font app-misc/grc

  #+END_SRC


  #+BEGIN_SRC conf

        nano ~.bashrc~

        source /usr/share/bash-completion/completions/fzf
        source /usr/share/fzf/key-bindings.bash

        if [ -f /usr/bin/bat ]; then
            alias cat="bat"
        fi

  #+END_SRC

* Редактируем fstab

  #+BEGIN_SRC conf

            nano -w /etc/fstab

        /dev/sda5	    /                   ext4        noatime    0 1
        /dev/sda3	    /boot               ext2        noatime    0 0
        /dev/sda7       /var                ext4        noatime    0 0
        /dev/sda12      /home               ext4        noatime    0 0

        /dev/sda2	    /home/windows       ntfs-3g     defaults,noatime,locale=ru_RU.utf8,uid=abunbux,gid=abunbux      0 0
        /dev/sda9	    /home/media         ntfs-3g     defaults,noatime,locale=ru_RU.utf8,uid=abunbux,gid=abunbux      0 0
        /dev/sda10      /home/buffer        ntfs-3g     defaults,noatime,locale=ru_RU.utf8,uid=abunbux,gid=abunbux      0 0

        /dev/sda6       none                swap        sw                                                      0 0
        /dev/cdrom      /mnt/cdrom          auto        noauto,ro                                               0 0
        tmpfs           /tmp                tmpfs       rw,mode=01777,size=3G,nr_inodes=1m,nosuid               0 0

  #+END_SRC

* Имя компьютера

  #+BEGIN_SRC conf

        nano /etc/conf.d/hostname

        # Set to the hostname of this machine
        hostname="pasha"
        rc_before="net.lo"

  #+END_SRC

* Настраиваем сеть


  #+BEGIN_SRC conf

        nano /etc/conf.d/net

        dns_domain_lo="ix"
        dns_domain_enp3s0="ix"
        dns_domain_wlp2s0="ix"

        modules_wlp2s0f0="wpa_supplicant"
        wpa_supplicant_wlp2s0f0="-Dnl80211"
        config_wlp2s0f0="dhcp"
        dns_servers_wlp2s0f0="8.8.8.8 8.8.4.4"
        dns_search="ix"

        modules_wlp0s20u1="wpa_supplicant"
        wpa_supplicant_wlp0s20u1="-Dnl80211"
        config_wlp0s20u1="dhcp"
        dns_servers_wlp0s20u1="8.8.8.8 8.8.4.4"
        dns_search="ix"

        config_enp3s0="192.168.0.103 netmask 255.255.255.0 brd 192.168.0.255"
        dns_servers_enp3s0="8.8.8.8 8.8.4.4"
        routes_enp3s0="default via 192.168.0.1"
        dns_search="ix"



        cd /etc/init.d
        ln -s net.lo net.enp3s0
        rc-update add net.enp3s0 default

  #+END_SRC

* Пароль root и новый пользователь

  #+BEGIN_SRC conf

        passwd
        useradd -m -G users,wheel,audio,video -s /bin/bash {name}
        passwd {name}

  #+END_SRC

* Локализация консоли (русификация)

  Варианты смотрим в //usr/share/consolefonts/.
  Шрифт записывается без суффикса ~.psfu.gz~.
  Если нужны более крупные и более современные шрифты для HD-экранов, следует
  установить ~media-fonts/terminus-font~. Имеет шрифты размером от 12 до 32
  пикселей.

  #+BEGIN_SRC conf
        nano /etc/conf.d/consolefont

        consolefont="ter-v18n"

        rc-update add consolefont boot
  #+END_SRC



  #+BEGIN_SRC conf
        nano /etc/conf.d/keymaps

        keymap="-u ru"  # другие варианты: ls /usr/share/keymaps/i386/qwerty/
        windowkeys="YES"
        extended_keymaps=""
        dumpkeys_charset=""
        fix_euro="NO"
  #+END_SRC



  #+BEGIN_SRC conf
        nano /etc/env.d/02locale

        # Configuration file for eselect
        # This file has been automatically generated.

        LC_ALL=""
        LANG="ru_RU.utf8"
        LC_NUMERIC=POSIX
        LC_COLLATE="C"

        eselect locale list
        eselect locale set {можно ставить кириллицу}
  #+END_SRC

* Подчищаем за собой

  #+BEGIN_SRC conf
        rm /stage3-*.tar.bz2*
  #+END_SRC

* Дополняем make.conf

  emerge -av app-arch/lbzip2
  и добавляем в make.conf

  #+BEGIN_SRC conf

        PORTAGE_BUNZIP2_COMMAND="lbunzip2 -n4"
        PORTAGE_BZIP2_COMMAND="lbzip2 -n4"

  #+END_SRC

* Немножко безопасности при работе с portage

  Portage обычно запускается от пользователя root.
  Настройка ~FEATURES="userfetch"~ позволит Portage сбросить привилегии root при загрузке исходного кода и выполнит эту операцию с правами пользователя/группы ~portage:portage~. Это небольшое усиление безопасности.

  Если userfetch установлена в ~FEATURES~, убедитесь, что изменили владельца у всех файлов в ~/var/db/repos/gentoo~ с помощью команды chown, запущенной с правами root:

  #+BEGIN_SRC conf

        chown --recursive --verbose portage:portage /var/db/repos/gentoo

  #+END_SRC

* Ставим xorg-server ,plasma и сопутствующий софт

  # За подробным руководством переходим по адресу [[https://wiki.gentoo.org/wiki/Xorg/Guide/ru][Xorg/Руководство]] на wiki gentoo.

  # Ну, а если кратенько:

  Сперва выбираем профайл:

  #+BEGIN_SRC conf

        eselect profile list
        eselect profile set {ставим нужное}

        # и обновляем мир
        emerge --update --deep --with-bdeps=y --newuse @world -av --keep-going

        # «dbus» должен установиться после смены профиля и обновления мира,
        # так-как входит в «global USE flags»
        rc-update add dbus default

  #+END_SRC

  Затем ставим необходимый софт:

  #+BEGIN_SRC conf

        emerge x11-base/xorg-x11 x11-apps/mesa-progs

        emerge kde-plasma/plasma-desktop kde-apps/dolphin kde-apps/spectacle kde-apps/yakuake kde-plasma/kde-gtk-config kde-plasma/kdeplasma-addons kde-plasma/khotkeys kde-plasma/kmenuedit kde-plasma/plasma-nm kde-plasma/plasma-pa kde-plasma/systemsettings app-arch/rar kde-apps/ark kde-apps/gwenview kde-apps/kcharselect kde-apps/kcron kde-apps/kompare kde-misc/kdiff3 kde-plasma/breeze-gtk media-video/smplayer www-client/firefox-bin www-client/google-chrome

        emerge kde-plasma/powerdevil kde-plasma/xembed-sni-proxy media-video/mplayer media-video/mpv

  #+END_SRC

** Вход в графическую систему

   SDDM (Simple Desktop Display Manager) — рекомендуемый менеджер входа (login
   manager), который автоматически установится как зависимость от
   ~kde-plasma/plasma-meta~. Это предпочтительное приложение. В качестве альтернативы
   может быть использован ~lightdm~; он установится автоматически, если установлен
   ~USE-флаг -sddm~ для пакета ~kde-plasma/plasma-meta~.

   Но я предпочитаю дозированную установку - ~plasma-meta~ не подходит, ставил
   ~kde-plasma/plasma-desktop~, значит менеджер входа ставим ручками:

   #+BEGIN_SRC conf

         emerge x11-misc/sddm

         или

         emerge x11-misc/lightdm

   #+END_SRC

   А для запуска менеджера входа, каким бы он ни был, нужен ~display-manager~:

   Проверяем установился ли ~display-manager~ (должен был
   подтянуться как зависимость при установке ~x11-base/xorg-server~ (USE-флаг
   -systemd)):

   #+BEGIN_SRC conf
         eix display-manager

         [I] gui-libs/display-manager-init
             Доступные версии:      1.0-r3
             Установленные версии:  1.0-r3(10:17:09 12.10.2021)
             Домашняя страница:     https://wiki.gentoo.org/wiki/Project:X11
             Описание:              RC init files for starting display and login managers
   #+END_SRC

   Если по какой-либо причине ~gui-libs/display-manager-init~ отсутствует
   запускаем:

   #+BEGIN_SRC conf
         emerge -av gui-libs/display-manager-init
   #+END_SRC

   и затем

   #+BEGIN_SRC conf

         # nano /etc/conf.d/display-manager
         CHECKVT=7
         DISPLAYMANAGER="lightdm" # либо "sddm"

         rc-update add display-manager default

   #+END_SRC

** Автоматический вход в систему (имеется ввиду DE)

   Так-как я являюсь единственным пользователем своего ~ящика сказок~ - настроим
   автовход в графическое окружение.

   для ~lightdm~:

   #+BEGIN_SRC conf

         nano /etc/lightdm/lightdm.conf

         [Seat:*]
         pam-service=lightdm
         pam-autologin-service=lightdm-autologin
         autologin-user={username}
         autologin-user-timeout=0
         session-wrapper=/etc/lightdm/Xsession

         groupadd -r autologin
         gpasswd -a username autologin

   #+END_SRC

   или для ~sddm~:

   #+BEGIN_SRC conf

         mkdir /etc/sddm.conf.d/

         nano /etc/sddm.conf.d/autologin.conf

         [Autologin]
         User={username}
         Session=plasma.desktop

   #+END_SRC

* Настройка nfs

  #+BEGIN_SRC conf

        nano /etc/exports
        /home		192.168.0.101(rw,sync,fsid=0,crossmnt,no_subtree_check)
        /home		192.168.0.103(rw,sync,fsid=0,crossmnt,no_subtree_check)

  #+END_SRC

  Подключение
  mount -t nfs 192.168.0.100:/home /mnt/

* Подключение nfs с помощью autofs

  emerge -av net-fs/autofs

  #+BEGIN_SRC conf

        # nano /etc/autofs/auto.master
        /net    /etc/autofs/auto.net --timeout=15

        # nano /etc/autofs/auto.net
        opts="-fstype=nfs,soft,rsize=8192,wsize=8192,nodev,nosuid"

        # nano /etc/conf.d/autofs
        MOUNT_WAIT=5

  #+END_SRC

  mkdir /net

  rc-update add autofs default
  /etc/init.d/autofs start

  Переход в папку делается командой
  cd /net/192.168.0.100(server)/home

* Дополнительные плюшки

** powerline ([[https://github.com/powerline/powerline][powerline на github]])

   #+BEGIN_SRC conf

         echo 'app-shells/powerline ~amd64' >> /etc/portage/package.accept_keywords/app-shells
         emerge app-shells/powerline

   #+END_SRC

   Добавляем в ~.bashrc~

   #+BEGIN_SRC conf

         if [ -f Symbol’s value as variable is void: which ]; then
             powerline-daemon -q
             POWERLINE_BASH_CONTINUATION=1
             POWERLINE_BASH_SELECT=1
             . /usr/lib/python3.9/site-packages/powerline/bindings/bash/powerline.sh
         fi

   #+END_SRC

** powerline fonts ([[https://github.com/powerline/fonts][powerline fonts на github]])

   #+BEGIN_SRC conf

         # clone
         git clone https://github.com/powerline/fonts.git --depth=1
         # install
         cd fonts
         ./install.sh       # ставятся в $HOME/.local/share/fonts
         fc-cache -vf ~/.local/share/fonts/

   #+END_SRC

   Можно вместо запуска ~./install.sh~, создать в ~$HOME/.local/share/fonts~ каталог
   ~powerline~ и переместить всё ручками.

   Для установки шрифта в текстовой консоли (~tty~):

   #+BEGIN_SRC conf

         cp -r Terminus/PSF/*.psf.gz /usr/share/consolefonts

   #+END_SRC


   прописываем в nano ~/etc/conf.d/consolefont~:
   #+BEGIN_SRC conf

         consolefont="ter-powerline-v18b"

   #+END_SRC

   или что понравится, для выбора запускаем:

   #+BEGIN_SRC conf

         ls /usr/share/consolefonts/*powerline*

   #+END_SRC

   копируем любое название без ~.psf.gz~ и прописываем в том-же
   ~/etc/conf.d/consolefont~.
   Перезапускаем ~consolefont~:

   #+BEGIN_SRC conf

         /etc/init.d/consolefont restart

   #+END_SRC

   #+BEGIN_SRC conf

         # clean-up a bit
         cd ..
         rm -rf fonts

   #+END_SRC

** tmux ([[https://github.com/tmux/tmux][tmux на github]])

   #+BEGIN_SRC conf

         emerge app-misc/tmux

   #+END_SRC

** tmux-bash-completion ([[https://github.com/imomaliev/tmux-bash-completion][tmux-bash-completion на github]])

   Requires ~bash-completion~ 1.2 or higher.

   #+BEGIN_SRC conf

         git clone https://github.com/imomaliev/tmux-bash-completion.git

   #+END_SRC


   Добавляем в ~.bashrc~

   #+BEGIN_SRC conf

         source /home/abunbux/opt/tmux-bash-completion/completions/tmux

   #+END_SRC

** marker ([[https://github.com/pindexis/marker][marker на github]])

   #+BEGIN_SRC conf

         git clone --depth=1 https://github.com/pindexis/marker ~/.marker && ~/.marker/install.py

   #+END_SRC

** forgit ([[https://github.com/wfxr/forgit][forgit на github]])

   Предварительно нужно установить ~fzf~.

   #+BEGIN_SRC conf

         git clone https://github.com/wfxr/forgit.git

   #+END_SRC

   #+BEGIN_SRC conf

         source /home/abunbux/opt/forgit/forgit.plugin.sh

   #+END_SRC

** delta ([[https://github.com/dandavison/delta][delta на github]])

   #+BEGIN_SRC conf

         emerge dev-util/git-delta

   #+END_SRC

   Дальше правим ~.gitconfig~.
   Если не работает - смотрим, что стоит в переменной ~PAGER~, у меня был ~most~ -
   закомментировал, всё работает.
